{"0":{"id":2277,"question":"What is the purpose of the EXPLAIN ANALYZE command in PostgreSQL?","description":"Understanding query performance analysis tools in PostgreSQL.","answers":{"answer_a":"It only shows the theoretical execution plan","answer_b":"It executes the query and shows actual timing and row counts along with the plan","answer_c":"It analyzes table statistics without running the query","answer_d":"It only shows query syntax errors","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"EXPLAIN ANALYZE actually executes the query and provides both the execution plan and real-world performance metrics, including actual time spent on each operation and actual row counts. This makes it invaluable for query optimization.","tip":null,"tags":[{"name":"Postgres"}],"category":"Postgres","difficulty":"Medium"},"1":{"id":2341,"question":"What is the most efficient way to implement a logging system for API requests in PostgreSQL?","description":"Understanding logging implementation in PostgreSQL.","answers":{"answer_a":"Individual INSERTs for each request","answer_b":"Unlogged tables with batch inserts","answer_c":"Writing to external files","answer_d":"Using foreign tables","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Unlogged tables with batch inserts provide high-performance logging without WAL overhead, ideal for high-volume API request logging where crash recovery isn't critical.","tip":null,"tags":[{"name":"Postgres"}],"category":"Postgres","difficulty":"Medium"},"2":{"id":2303,"question":"What is the recommended way to handle long-running queries in PostgreSQL?","description":"Understanding query management in PostgreSQL.","answers":{"answer_a":"Increase statement_timeout","answer_b":"Use cursor-based processing with DECLARE CURSOR","answer_c":"Split into smaller queries","answer_d":"Run during off-peak hours","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Cursor-based processing allows handling large result sets efficiently by fetching rows in batches, preventing memory exhaustion and allowing better resource management.","tip":null,"tags":[{"name":"Postgres"}],"category":"Postgres","difficulty":"Medium"},"3":{"id":2296,"question":"Which monitoring metric best indicates potential performance issues in PostgreSQL?","description":"Understanding PostgreSQL performance monitoring.","answers":{"answer_a":"Number of active connections","answer_b":"Transaction ID wraparound","answer_c":"Cache hit ratio","answer_d":"Number of dead tuples","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"false","answer_c_correct":"true","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Cache hit ratio indicates how often data is found in PostgreSQL's buffer cache vs. reading from disk. A low ratio suggests potential memory configuration issues or inefficient queries.","tip":null,"tags":[{"name":"Postgres"}],"category":"Postgres","difficulty":"Medium"},"4":{"id":2407,"question":"What is the most effective way to optimize performance of array operations?","description":"Understanding array operation optimization.","answers":{"answer_a":"Convert to separate tables","answer_b":"Use GIN indexes with array operators","answer_c":"Store as JSON","answer_d":"Use text arrays","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"GIN indexes with array operators provide efficient array operations by creating searchable index entries for array elements while maintaining array functionality.","tip":null,"tags":[{"name":"Postgres"}],"category":"Postgres","difficulty":"Medium"},"5":{"id":2359,"question":"Which setting most effectively prevents long-running queries from impacting system performance?","description":"Understanding query resource management.","answers":{"answer_a":"max_connections","answer_b":"statement_timeout with resource groups","answer_c":"work_mem","answer_d":"shared_buffers","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"statement_timeout combined with resource groups provides effective control over long-running queries by terminating them and managing resource allocation.","tip":null,"tags":[{"name":"Postgres"}],"category":"Postgres","difficulty":"Medium"},"6":{"id":2345,"question":"What is the best practice for handling frequently changing lookup tables in PostgreSQL?","description":"Understanding cache invalidation strategies in PostgreSQL.","answers":{"answer_a":"Regular table scans","answer_b":"Materialized views with targeted refreshes","answer_c":"Cache in application","answer_d":"Temporary tables","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Materialized views with targeted refreshes provide efficient caching of lookup data while allowing quick updates when source data changes, balancing performance and freshness.","tip":null,"tags":[{"name":"Postgres"}],"category":"Postgres","difficulty":"Medium"},"7":{"id":2300,"question":"Which PostgreSQL extension would you use for automated partition management?","description":"Understanding partition management in PostgreSQL.","answers":{"answer_a":"pg_partman","answer_b":"pg_partition","answer_c":"auto_partition","answer_d":"partition_manager","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"pg_partman provides automated partition creation and maintenance, including time-based and serial-based partitioning, making it the standard tool for partition management in PostgreSQL.","tip":null,"tags":[{"name":"Postgres"}],"category":"Postgres","difficulty":"Medium"},"8":{"id":2305,"question":"What is the most efficient way to handle temporary data in PostgreSQL?","description":"Understanding temporary data management in PostgreSQL.","answers":{"answer_a":"Create regular tables and delete data","answer_b":"Use TEMPORARY tables with ON COMMIT DROP","answer_c":"Store in memory only","answer_d":"Use materialized views","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"TEMPORARY tables with ON COMMIT DROP provide efficient handling of session-specific temporary data, automatically cleaning up resources when the transaction ends.","tip":null,"tags":[{"name":"Postgres"}],"category":"Postgres","difficulty":"Medium"},"9":{"id":2328,"question":"How can you implement robust error handling for foreign key violations in PostgreSQL?","description":"Understanding error handling in PostgreSQL.","answers":{"answer_a":"Use try-catch in application code","answer_b":"Create an EXCEPTION block in a PL/pgSQL function","answer_c":"Disable foreign key constraints","answer_d":"Use triggers to prevent violations","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"PL/pgSQL EXCEPTION blocks provide server-side error handling for foreign key violations, allowing custom recovery logic and maintaining data consistency at the database level.","tip":null,"tags":[{"name":"Postgres"}],"category":"Postgres","difficulty":"Medium"},"quizMetaData":{"createdBy":"99692866465","difficulty":"medium","topic":"postgres","totalQuestions":"10","createdAt":"25/05/2025\t15:26:08","description":"wresfd","time":"30"},"marks":"0","answer":{}}