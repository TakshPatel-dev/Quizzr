{"0":{"id":10104,"question":"A team needs to implement Terraform for autoscaling applications in the cloud. Which approach would be most robust?","description":"Implementing autoscaling with Terraform.","answers":{"answer_a":"Manually add instances when needed","answer_b":"Implement predictive scaling with health-based recovery and load testing","answer_c":"Always run at maximum capacity","answer_d":"Restart applications when they become unresponsive","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Predictive scaling with health-based recovery and load testing provides the most robust autoscaling implementation. Predictive scaling adjusts capacity before demand spikes occur. Health-based recovery replaces unhealthy instances automatically. Load testing verifies autoscaling behavior before production. This approach proactively handles both predictable and unexpected load patterns, ensures application availability during scaling events, automatically recovers from instance failures, optimizes cost by scaling based on actual requirements, and creates a resilient application platform that maintains performance regardless of load conditions.","tip":null,"tags":[{"name":"Terraform"}],"category":"DevOps","difficulty":"Medium"},"1":{"id":10114,"question":"A team needs to implement infrastructure monitoring for their Terraform-managed resources. Which approach would be most comprehensive?","description":"Implementing effective infrastructure monitoring with Terraform.","answers":{"answer_a":"Check the cloud provider console periodically","answer_b":"Implement automated monitoring with threshold-based alerts and dashboards","answer_c":"React to issues when users report them","answer_d":"Focus only on cost monitoring","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Automated monitoring with threshold-based alerts and dashboards provides the most comprehensive monitoring solution. Automated monitoring continually checks infrastructure health. Threshold-based alerts notify teams before issues impact users. Dashboards provide visibility into infrastructure status. This approach enables proactive detection of issues before they affect users, provides comprehensive visibility into infrastructure performance and health, automates appropriate responses to common issues, centralizes monitoring across all infrastructure components, and creates a complete monitoring system that ensures infrastructure reliability.","tip":null,"tags":[{"name":"Terraform"}],"category":"DevOps","difficulty":"Medium"},"2":{"id":10160,"question":"A team needs to implement a Docker-based local development environment that closely mirrors production. Which approach would be most effective?","description":"Creating production-like development environments with Docker.","answers":{"answer_a":"Use completely different configurations for development and production","answer_b":"Implement Docker Compose with production-parity services and volume mounts","answer_c":"Have developers work directly in production","answer_d":"Use simplified containers for development","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Docker Compose with production-parity services and volume mounts provides the most effective development environment. Production-parity services ensure development dependencies match production (same databases, queues, etc.). Volume mounts enable live code reloading without rebuilds. Docker Compose manages the multi-container environment declaratively. This approach creates development environments that behave like production while maintaining development efficiency, catches environment-specific issues early, enables realistic local testing before deployment, and gives developers a consistent, production-like environment regardless of their local OS.","tip":null,"tags":[{"name":"Docker"}],"category":"DevOps","difficulty":"Medium"},"3":{"id":900,"question":"To program additional authentication logic besides available authenticator modules, _______________ can be used.","description":null,"answers":{"answer_a":"WebHook Authentication","answer_b":"Keystone Password","answer_c":"Authentication Proxy","answer_d":"OpenID Connect Tokens","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"false","answer_c_correct":"true","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":null,"tip":null,"tags":[{"name":"Kubernetes"}],"category":"DevOps","difficulty":"Medium"},"4":{"id":1171,"question":"What is the correct syntax to create a virtual environment in Python 3?","description":"Virtual environments are used to manage dependencies for different projects.","answers":{"answer_a":"python3 -m venv env","answer_b":"virtualenv env","answer_c":"python3 -venv env","answer_d":"mkvirtualenv env","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":"answer_a","explanation":"The correct syntax to create a virtual environment in Python 3 is python3 -m venv env.","tip":"Use venv to create isolated environments for your projects.","tags":[],"category":"DevOps","difficulty":"Medium"},"5":{"id":1220,"question":"What is the main purpose of the SecurityContextConstraints (SCC) in OpenShift?","description":"The SecurityContextConstraints (SCC) in OpenShift defines permissions for pods, ensuring security and compliance within the cluster.","answers":{"answer_a":"To manage cluster networking policies","answer_b":"To define security permissions for pods","answer_c":"To configure API access","answer_d":"To control resource quotas for projects","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"SecurityContextConstraints (SCC) are used in OpenShift to manage the security context of pods, ensuring compliance with security requirements.","tip":null,"tags":[{"name":"Openshift"}],"category":"DevOps","difficulty":"Medium"},"6":{"id":1014,"question":"______ is distributed key-value store that provides a reliable way to store data that needs to be accessed by a distributed system or cluster of machines.","description":null,"answers":{"answer_a":"A Kubernetes pod","answer_b":"A Kubernetes service","answer_c":"A Kubernetes volume","answer_d":"etcd","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"true","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":null,"tip":null,"tags":[{"name":"Kubernetes"}],"category":"DevOps","difficulty":"Medium"},"7":{"id":10122,"question":"A development team is struggling with inconsistent behavior between development and production environments despite using Docker. Which approach would most effectively solve this problem?","description":"Ensuring environment consistency with Docker.","answers":{"answer_a":"Have developers use the same operating system as production","answer_b":"Implement Docker Compose with version-pinned dependencies and environment controls","answer_c":"Deploy to production more frequently","answer_d":"Create detailed documentation about the differences","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Docker Compose with version-pinned dependencies and environment controls ensures that all environments use the same container configurations, versions, and settings. By explicitly versioning all dependencies, setting up shared environment configurations, and creating a reproducible multi-container setup, teams can eliminate environment discrepancies. This approach addresses the core 'works on my machine' problem that Docker was designed to solve by providing a consistent, declarative way to define the entire application stack with all necessary services, networks, and volumes.","tip":null,"tags":[{"name":"Docker"}],"category":"DevOps","difficulty":"Medium"},"8":{"id":10177,"question":"Your team is developing a microservices application using Docker. Which service communication pattern would be most effective?","description":"Implementing effective service communication in containerized microservices.","answers":{"answer_a":"Use direct container IP addressing","answer_b":"Implement service discovery with API gateways and circuit breakers","answer_c":"Combine all services that need to communicate into a single container","answer_d":"Use shared volumes for all inter-service communication","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Service discovery with API gateways and circuit breakers provides the most effective microservices communication. Service discovery enables services to find each other by name rather than hardcoded IPs. API gateways provide a unified entry point for external clients. Circuit breakers prevent cascading failures when services are unavailable. This comprehensive approach handles the dynamic nature of containerized environments, provides resilience against service failures, simplifies client communication with the microservices ecosystem, enables sophisticated routing and load balancing, and creates a robust communication architecture suitable for complex microservices applications.","tip":null,"tags":[{"name":"Docker"}],"category":"DevOps","difficulty":"Medium"},"9":{"id":10163,"question":"Your team needs to implement container resource monitoring for a production environment. Which approach would provide the most actionable insights?","description":"Implementing effective container monitoring.","answers":{"answer_a":"Check resource usage manually when problems occur","answer_b":"Implement hierarchical monitoring with container-aware metrics and business KPIs","answer_c":"Monitor only host-level metrics","answer_d":"Create dashboards with every possible metric","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Hierarchical monitoring with container-aware metrics and business KPIs provides the most insightful observability. Container-aware metrics (CPU, memory, network by container) provide infrastructure-level visibility. Business KPIs connect resource usage to application outcomes. Hierarchical organization relates metrics at different levels (host, container, application). This comprehensive approach connects technical metrics to business impact, enables identifying both symptoms and root causes, provides context for prioritizing issues, spans infrastructure and application concerns, and creates actionable monitoring that supports both operations and business decision-making.","tip":null,"tags":[{"name":"Docker"}],"category":"DevOps","difficulty":"Medium"},"quizMetaData":{"createdBy":"18656047691","difficulty":"medium","topic":"devops","totalQuestions":"10","createdAt":"25/05/2025\t15:19:01","description":"nbvnnvnv","time":"30"},"marks":"0","answer":{}}