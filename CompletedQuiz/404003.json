{"0":{"id":4480,"question":"What does 'process.on('warning')' capture in Node.js?","description":"Handling warnings in Node.js.","answers":{"answer_a":"Emitted when a deprecation warning is encountered","answer_b":"Emitted for memory warnings","answer_c":"Emitted for performance issues","answer_d":"All of the above","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"true","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"'process.on('warning')' captures warnings related to deprecation, memory, or performance issues.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"1":{"id":4495,"question":"What event is emitted when a writable stream finishes writing all data?","description":"Understanding writable stream events.","answers":{"answer_a":"'close'","answer_b":"'finish'","answer_c":"'end'","answer_d":"'data'","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"The 'finish' event is emitted when a writable stream has completed writing all data.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"2":{"id":4619,"question":"How can you ensure a callback-based function is executed in sequence?","description":"Handling callback execution order.","answers":{"answer_a":"Using Promises and chaining '.then()' calls","answer_b":"Using 'process.nextTick()'","answer_c":"Using 'setImmediate()'","answer_d":"Callback-based functions cannot be executed in sequence","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Callback-based functions can be executed in sequence by converting them to Promises and chaining '.then()' calls.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"3":{"id":4501,"question":"What is a 'Duplex' stream in Node.js?","description":"Exploring duplex streams.","answers":{"answer_a":"A stream that only reads data","answer_b":"A stream that only writes data","answer_c":"A stream that is both readable and writable","answer_d":"A stream that transforms data","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"false","answer_c_correct":"true","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"A 'Duplex' stream in Node.js is both readable and writable, allowing two-way data flow.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"4":{"id":5190,"question":"Which type of stream is used for reading data in Node.js?","description":"Types of streams in Node.js.","answers":{"answer_a":"Readable stream","answer_b":"Writable stream","answer_c":"Transform stream","answer_d":"Duplex stream","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"A readable stream is used for reading data, such as reading from a file or receiving data over a network.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"5":{"id":4482,"question":"How can you create a custom REPL in Node.js?","description":"Exploring REPL customization.","answers":{"answer_a":"Using the 'repl.start()' method","answer_b":"Using the 'console.createREPL()' method","answer_c":"Extending the 'vm' module","answer_d":"Using the 'util.repl()' method","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"A custom REPL can be created using the 'repl.start()' method, allowing full customization.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"6":{"id":5076,"question":"What is the purpose of 'eventEmitter.rawListeners()'?","description":"Understanding 'rawListeners()'.","answers":{"answer_a":"Returns an array of listeners, including wrapped 'once' listeners","answer_b":"Removes all listeners for a specific event","answer_c":"Returns the count of listeners for a specific event","answer_d":"Logs all raw data related to the listeners","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"'eventEmitter.rawListeners()' returns an array of listeners for the event, including wrapped 'once' listeners.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"7":{"id":4943,"question":"How can you prevent a child process from being terminated when the parent process exits?","description":"Managing child process lifetime.","answers":{"answer_a":"Set the 'detached' option to true","answer_b":"Use 'child.preventExit()'","answer_c":"Call 'child.detach()' after creation","answer_d":"Child processes cannot be prevented from termination","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Setting the 'detached' option to true allows the child process to run independently of the parent process.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"8":{"id":5198,"question":"What is backpressure in the context of Node.js streams?","description":"Understanding backpressure in streams.","answers":{"answer_a":"It occurs when the writable stream cannot handle the speed of incoming data from the readable stream","answer_b":"It refers to buffering data in memory to increase performance","answer_c":"It is the delay introduced by using transform streams","answer_d":"It is the process of splitting a stream into multiple chunks","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Backpressure occurs when the writable stream cannot process data as fast as the readable stream is producing it.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"9":{"id":5314,"question":"What is the difference between `module.exports` and `exports` in CommonJS?","description":"Understanding `module.exports` vs `exports`.","answers":{"answer_a":"`module.exports` is the actual object exported, while `exports` is a shorthand for adding properties to it","answer_b":"`exports` is used for ES Modules, and `module.exports` is for CommonJS","answer_c":"`module.exports` is global, and `exports` is local","answer_d":"They are completely interchangeable","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"`module.exports` is the actual object that gets exported, while `exports` is a shorthand for adding properties to it.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"10":{"id":4576,"question":"How can you convert a callback-based function into a Promise-based one?","description":"Promisifying callback-based functions.","answers":{"answer_a":"Using 'util.promisify()'","answer_b":"Using 'Promise.wrap()'","answer_c":"By wrapping it in an async function","answer_d":"By using the 'callbackToPromise()' method","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"'util.promisify()' converts a callback-based function into a Promise-based one.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"11":{"id":5229,"question":"What is the primary purpose of the `tls.createServer()` method in Node.js?","description":"Understanding `tls.createServer()`.","answers":{"answer_a":"To create a secure TLS server for handling encrypted connections","answer_b":"To establish a secure outgoing connection","answer_c":"To convert an HTTP server to HTTPS","answer_d":"To manage certificates in the Node.js process","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"`tls.createServer()` creates a secure TLS server that handles encrypted client-server connections.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"12":{"id":4604,"question":"What does the 'thenable' concept refer to in Promises?","description":"Exploring Promise interoperability.","answers":{"answer_a":"An object that has a 'then' method and behaves like a Promise","answer_b":"A Promise that resolves with another Promise","answer_c":"A synchronous alternative to Promises","answer_d":"A chain of Promises","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"A 'thenable' is an object that has a 'then' method and behaves like a Promise.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"13":{"id":3711,"question":"What does 'os.uptime()' return?","description":"Retrieving system uptime.","answers":{"answer_a":"The total memory used by the system","answer_b":"The system uptime in seconds","answer_c":"The CPU usage","answer_d":"The number of active processes","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"'os.uptime()' returns the system uptime in seconds.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"14":{"id":5153,"question":"What is a key feature of the `v8.getHeapStatistics()` method?","description":"Understanding `v8.getHeapStatistics()`.","answers":{"answer_a":"It provides detailed statistics about the V8 heap memory usage","answer_b":"It clears unused heap memory","answer_c":"It triggers garbage collection","answer_d":"It exports heap data as JSON","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"`v8.getHeapStatistics()` provides detailed statistics about the V8 heap memory usage, which is useful for debugging memory issues.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"quizMetaData":{"createdBy":"18656047691","difficulty":"medium","topic":"nodejs","totalQuestions":"15","createdAt":"26/04/2025\t15:35:17","description":"This is a NodeJs Quiz","time":"20"},"marks":"0","answer":{"0":"answer_a","1":"answer_a","2":"answer_b","3":"answer_b","4":"answer_d","5":"answer_b","6":"answer_b","7":"answer_b","8":"answer_b","11":"answer_c"}}