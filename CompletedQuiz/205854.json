{"0":{"id":5197,"question":"What is the effect of calling `stream.pause()` on a readable stream?","description":"Pausing a readable stream.","answers":{"answer_a":"It stops the 'data' event from being emitted temporarily","answer_b":"It closes the stream permanently","answer_c":"It clears the stream's internal buffer","answer_d":"It prevents the stream from being piped to another writable stream","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"`stream.pause()` temporarily stops the 'data' event from being emitted, allowing backpressure management.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"1":{"id":4818,"question":"How can you dynamically adjust the number of workers in a running cluster?","description":"Scaling workers dynamically.","answers":{"answer_a":"Add or remove workers using 'cluster.fork()' and 'worker.kill()'","answer_b":"Modify the 'workerCount' property of the cluster","answer_c":"Restart the cluster with a new worker count","answer_d":"Use the 'cluster.resize()' method","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"To dynamically adjust workers, use 'cluster.fork()' to add workers and 'worker.kill()' to remove them.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"2":{"id":5162,"question":"What is the purpose of the `async_hooks.createHook()` method?","description":"Understanding `createHook` in `async_hooks`.","answers":{"answer_a":"It allows custom callbacks to monitor asynchronous operations","answer_b":"It creates new asynchronous operations","answer_c":"It profiles memory usage in asynchronous tasks","answer_d":"It triggers hooks for all function calls","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"`async_hooks.createHook()` lets you attach custom callbacks to monitor the lifecycle of asynchronous operations.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"3":{"id":5208,"question":"How can you throttle the speed of a readable stream?","description":"Throttling stream speed.","answers":{"answer_a":"Use a transform stream to introduce delays between chunks","answer_b":"Adjust the `highWaterMark` value to a lower setting","answer_c":"Pause the stream periodically using `stream.pause()`","answer_d":"Readable streams cannot be throttled","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"A transform stream can introduce delays between chunks to throttle the speed of a readable stream.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"4":{"id":4507,"question":"What does the 'readable.isPaused()' method return?","description":"Checking the state of a readable stream.","answers":{"answer_a":"The current chunk being read","answer_b":"True if the readable stream is paused","answer_c":"The size of the buffer","answer_d":"False if the readable stream is paused","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"'readable.isPaused()' returns true if the readable stream is currently paused.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"5":{"id":5030,"question":"What is the purpose of the 'digest' parameter in hashing algorithms?","description":"Understanding the 'digest' parameter.","answers":{"answer_a":"Specifies the output encoding format (e.g., hex, base64)","answer_b":"Specifies the hashing algorithm","answer_c":"Determines the size of the output hash","answer_d":"Specifies the type of data being hashed","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"The 'digest' parameter in hashing algorithms specifies the output encoding format, such as 'hex' or 'base64'.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"6":{"id":5028,"question":"Which encryption mode is generally recommended for secure data storage in Crypto?","description":"Choosing the right encryption mode.","answers":{"answer_a":"AES-GCM","answer_b":"AES-CBC","answer_c":"DES","answer_d":"Blowfish","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"'AES-GCM' is recommended for secure data storage due to its built-in integrity verification.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"7":{"id":5024,"question":"What is the difference between 'createCipher' and 'createCipheriv'?","description":"Comparing 'createCipher' and 'createCipheriv'.","answers":{"answer_a":"'createCipheriv' allows you to specify an initialization vector, while 'createCipher' does not","answer_b":"'createCipher' is asynchronous, and 'createCipheriv' is synchronous","answer_c":"'createCipheriv' uses more secure algorithms than 'createCipher'","answer_d":"'createCipher' is deprecated","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"'createCipheriv' allows you to specify an initialization vector (IV), providing more control over the encryption process.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"8":{"id":3698,"question":"Which HTTP status code indicates a redirect?","description":"Understanding HTTP response codes.","answers":{"answer_a":"200","answer_b":"301","answer_c":"404","answer_d":"500","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"The HTTP status code '301' indicates a redirect.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"9":{"id":4684,"question":"What does the 'req.socket' property represent?","description":"Understanding the connection socket in HTTP requests.","answers":{"answer_a":"The network socket associated with the request","answer_b":"The HTTP headers for the request","answer_c":"The parsed URL of the request","answer_d":"The body of the request","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"'req.socket' provides access to the network socket associated with the HTTP request.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"10":{"id":3755,"question":"What does the 'net.createServer()' method do?","description":"Creating servers with the 'net' module.","answers":{"answer_a":"Creates an HTTP server","answer_b":"Creates a TCP server","answer_c":"Creates a UDP server","answer_d":"Creates a file server","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"'net.createServer()' creates a TCP server in Node.js.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"11":{"id":4563,"question":"What is the primary difference between Promises and callbacks?","description":"Understanding how Promises improve asynchronous programming.","answers":{"answer_a":"Promises execute code synchronously, while callbacks are always asynchronous","answer_b":"Promises provide a cleaner syntax for handling asynchronous code and support chaining","answer_c":"Callbacks are more efficient than Promises","answer_d":"Promises cannot handle errors, but callbacks can","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Promises provide a cleaner syntax, support chaining, and improve error handling compared to traditional callbacks.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"12":{"id":4483,"question":"What does 'crypto.generateKeyPair()' do in Node.js?","description":"Understanding key pair generation.","answers":{"answer_a":"Creates a public and private key pair asynchronously","answer_b":"Hashes data using the public key","answer_c":"Encrypts data using the private key","answer_d":"Generates random integers for cryptography","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"'crypto.generateKeyPair()' generates a public and private key pair asynchronously for cryptographic purposes.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"13":{"id":4877,"question":"What happens if you post a circular object to a worker thread using 'postMessage()'?","description":"Handling circular objects in messages.","answers":{"answer_a":"An error is thrown indicating a circular structure","answer_b":"The circular reference is automatically removed","answer_c":"The object is serialized without the circular structure","answer_d":"The worker thread terminates","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Posting a circular object using 'postMessage()' throws an error, as it cannot be serialized.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"14":{"id":5011,"question":"How do you generate a cryptographically secure key using the Crypto module?","description":"Key generation with the Crypto module.","answers":{"answer_a":"Use 'crypto.randomBytes(size)'","answer_b":"Use 'crypto.generateKey(size)'","answer_c":"Use 'crypto.createKey(size)'","answer_d":"Use 'crypto.getSecureKey(size)'","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"'crypto.randomBytes(size)' generates a cryptographically secure key of the specified size.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Medium"},"quizMetaData":{"createdBy":"48412790373","difficulty":"medium","topic":"nodejs","totalQuestions":"15","createdAt":"09/05/2025\t12:41:48","description":"Node Js first Quiz","time":"60"},"marks":"11","answer":{"0":"answer_a","1":"answer_a","2":"answer_a","3":"answer_a","4":"answer_a","5":"answer_a","6":"answer_a","7":"answer_a","8":"answer_a","9":"answer_a","10":"answer_a","11":"answer_a","12":"answer_a","13":"answer_a","14":"answer_a"}}