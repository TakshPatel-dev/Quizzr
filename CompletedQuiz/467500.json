{"0":{"id":10086,"question":"A team is experiencing inconsistent execution results with Terraform. Which approach would most effectively improve reliability?","description":"Improving execution reliability in Terraform.","answers":{"answer_a":"Run Terraform multiple times until it works","answer_b":"Implement dependency management with explicit depends_on and provider configurations","answer_c":"Increase all timeouts to maximum values","answer_d":"Add sleep operations between resource creations","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Dependency management with explicit depends_on and provider configurations provides the most effective reliability improvement. Explicit depends_on ensures resources are created/modified in the correct order. Provider configurations with proper timeouts and retry logic handle transient failures. This approach addresses the root causes of inconsistent execution, ensures proper resource creation sequencing, handles cloud provider API limitations appropriately, makes dependencies explicit rather than relying on implicit behavior, and creates a more deterministic and reliable execution process.","tip":null,"tags":[{"name":"Terraform"}],"category":"DevOps","difficulty":"Medium"},"1":{"id":1230,"question":"How does OpenShift handle secret data for applications, like API keys or passwords?","description":"OpenShift uses Secret objects to securely store and manage sensitive application data.","answers":{"answer_a":"By using the oc encrypt command","answer_b":"Through Secret objects that store and manage sensitive data securely","answer_c":"By writing them directly to environment variables","answer_d":"By encoding them in DeploymentConfig","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Secret objects in OpenShift securely store sensitive information like API keys and passwords.","tip":null,"tags":[{"name":"Openshift"}],"category":"DevOps","difficulty":"Medium"},"2":{"id":1151,"question":"What type of OpenShift resource should be used to create an environment for running a Job or CronJob?","description":null,"answers":{"answer_a":"Pod","answer_b":"DeploymentConfig","answer_c":"DaemonSet","answer_d":"Project","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":"answer_a","explanation":null,"tip":null,"tags":[{"name":"Openshift"}],"category":"DevOps","difficulty":"Medium"},"3":{"id":10153,"question":"Your team needs to implement inter-container communication for a microservices architecture. Which approach would provide the best balance of security and performance?","description":"Implementing secure and efficient container communication.","answers":{"answer_a":"Use host networking for all containers","answer_b":"Implement container networks with service discovery and TLS","answer_c":"Connect all containers to a single network","answer_d":"Make all inter-service calls through the public internet","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Container networks with service discovery and TLS provide the optimal balance of security and performance. Dedicated container networks isolate service communication from other traffic. Service discovery enables containers to find each other by name rather than hardcoded IPs. TLS encryption secures communication against eavesdropping or tampering. This approach maintains network isolation for security, enables seamless service scaling and replacement, secures sensitive inter-service communication, and creates a flexible networking foundation that supports complex microservices architectures while maintaining both security and performance.","tip":null,"tags":[{"name":"Docker"}],"category":"DevOps","difficulty":"Medium"},"4":{"id":1432,"question":"How does Docker handle layers in images?","description":"Each instruction in a Dockerfile creates a new layer, which Docker caches to optimize builds.","answers":{"answer_a":"Docker combines all instructions into one layer","answer_b":"Each instruction in a Dockerfile creates a new layer","answer_c":"Layers are only created when a container is running","answer_d":"Docker does not use layers","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Docker creates a new layer for each instruction in a Dockerfile, allowing efficient caching and reuse of layers.","tip":null,"tags":[{"name":"Docker"}],"category":"DevOps","difficulty":"Medium"},"5":{"id":10063,"question":"A team needs to manage drift in their Terraform-managed infrastructure. Which approach would be most effective?","description":"Implementing drift management strategies with Terraform.","answers":{"answer_a":"Manually update the state file when changes occur","answer_b":"Implement regular drift detection with automated remediation","answer_c":"Prevent all manual changes to infrastructure","answer_d":"Recreate all infrastructure weekly","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Regular drift detection with automated remediation provides the most effective drift management. Scheduled terraform plan runs detect differences between actual infrastructure and desired state. Automated remediation applies corrections when drift is detected. This approach maintains infrastructure consistency without requiring a strictly locked-down environment, provides visibility into unauthorized or unexpected changes, automatically restores infrastructure to the desired state, and creates a resilient system that can self-heal from manual modifications.","tip":null,"tags":[{"name":"Terraform"}],"category":"DevOps","difficulty":"Medium"},"6":{"id":1154,"question":"To view the configuration details, events, and status of a specific pod, which OpenShift command would you use?","description":null,"answers":{"answer_a":"oc describe pod <pod-name>","answer_b":"oc logs <pod-name>","answer_c":"oc status pod <pod-name>","answer_d":"oc get pod <pod-name> --details","answer_e":"oc describe pod <pod-name> --details","answer_f":"oc get pod <pod-name>"},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":"answer_a","explanation":null,"tip":null,"tags":[{"name":"Openshift"}],"category":"DevOps","difficulty":"Medium"},"7":{"id":1406,"question":"How do you view the current nodes in a Docker Swarm cluster?","description":"Listing nodes in a Docker Swarm provides insight into each node's status and role within the cluster.","answers":{"answer_a":"docker node ls","answer_b":"docker swarm nodes","answer_c":"docker ls nodes","answer_d":"docker show nodes","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"The `docker node ls` command lists all nodes in the Docker Swarm, including their roles and statuses.","tip":null,"tags":[{"name":"Docker"}],"category":"DevOps","difficulty":"Medium"},"8":{"id":10177,"question":"Your team is developing a microservices application using Docker. Which service communication pattern would be most effective?","description":"Implementing effective service communication in containerized microservices.","answers":{"answer_a":"Use direct container IP addressing","answer_b":"Implement service discovery with API gateways and circuit breakers","answer_c":"Combine all services that need to communicate into a single container","answer_d":"Use shared volumes for all inter-service communication","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Service discovery with API gateways and circuit breakers provides the most effective microservices communication. Service discovery enables services to find each other by name rather than hardcoded IPs. API gateways provide a unified entry point for external clients. Circuit breakers prevent cascading failures when services are unavailable. This comprehensive approach handles the dynamic nature of containerized environments, provides resilience against service failures, simplifies client communication with the microservices ecosystem, enables sophisticated routing and load balancing, and creates a robust communication architecture suitable for complex microservices applications.","tip":null,"tags":[{"name":"Docker"}],"category":"DevOps","difficulty":"Medium"},"9":{"id":927,"question":"Which ones are a core Kubernetes object?","description":null,"answers":{"answer_a":"“Pods,” “Services,” “Volumes,”","answer_b":"“Swarm,” “Pilot,” “Node,”","answer_c":null,"answer_d":null,"answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":null,"tip":null,"tags":[{"name":"Kubernetes"}],"category":"DevOps","difficulty":"Medium"},"quizMetaData":{"createdBy":"18656047691","difficulty":"medium","topic":"devops","totalQuestions":"10","createdAt":"25/05/2025\t02:06:28","description":"sads","time":"30"},"marks":"0","answer":{}}