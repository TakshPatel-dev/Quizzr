{"0":{"id":4636,"question":"How does the Node.js 'async_hooks' module track the lifecycle of async resources?","description":"Understanding lifecycle tracking with 'async_hooks'.","answers":{"answer_a":"It provides hooks for creation, execution, and destruction of async resources","answer_b":"It logs all async operations to the console","answer_c":"It blocks execution of untracked resources","answer_d":"It automatically retries failed async operations","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"'async_hooks' provides hooks for creation, execution, and destruction of async resources to monitor their lifecycle.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Hard"},"1":{"id":3776,"question":"What is the difference between 'process.stdin' and 'readline'?","description":"Comparing input methods in Node.js.","answers":{"answer_a":"'process.stdin' handles raw streams, 'readline' adds higher-level utilities","answer_b":"'readline' handles binary data","answer_c":"'process.stdin' is asynchronous, 'readline' is synchronous","answer_d":"'readline' is only for network streams","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"'process.stdin' provides raw input streams, while 'readline' offers utilities like line-by-line input handling.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Hard"},"2":{"id":4905,"question":"What happens if a worker thread tries to execute blocking code for an extended period?","description":"Handling long-running blocking code in workers.","answers":{"answer_a":"The worker thread becomes unresponsive and may cause performance issues","answer_b":"The parent thread automatically terminates the worker","answer_c":"The blocking code is ignored","answer_d":"The event loop in the worker thread adapts to the blocking code","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Executing blocking code in a worker thread can make it unresponsive, causing performance issues.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Hard"},"3":{"id":4635,"question":"What is the behavior of 'Promise.resolve()' when passed a 'thenable' object?","description":"Handling thenable objects with Promises.","answers":{"answer_a":"It throws an error","answer_b":"It resolves the Promise with the 'thenable' object","answer_c":"It calls the 'then' method of the 'thenable' object","answer_d":"It ignores the 'thenable' and resolves with undefined","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"false","answer_c_correct":"true","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"'Promise.resolve()' calls the 'then' method of a 'thenable' object to resolve or reject based on its behavior.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Hard"},"4":{"id":4634,"question":"What is the purpose of the 'async_hooks.executionAsyncResource()' method?","description":"Tracking async resources in Node.js.","answers":{"answer_a":"Returns the resource object representing the current async operation","answer_b":"Returns the ID of the current execution context","answer_c":"Terminates all pending async resources","answer_d":"Starts a new async operation","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"'async_hooks.executionAsyncResource()' returns the resource object representing the current async operation.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Hard"},"5":{"id":4656,"question":"What does the 'AggregateError' object represent?","description":"Handling multiple errors in Node.js.","answers":{"answer_a":"An error containing multiple rejection reasons","answer_b":"A wrapper for async operation failures","answer_c":"An error triggered by a syntax issue","answer_d":"A deprecated error type in Node.js","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"'AggregateError' represents an error that contains multiple rejection reasons, often used with 'Promise.any()' or other methods.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Hard"},"6":{"id":4547,"question":"How does the 'objectMode' option affect streams?","description":"Exploring streams in object mode.","answers":{"answer_a":"Allows the stream to process objects instead of Buffers or strings","answer_b":"Converts all data into JSON format","answer_c":"Disables backpressure in the stream","answer_d":"Enables binary data processing","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"'objectMode' allows a stream to process objects instead of only Buffers or strings.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Hard"},"7":{"id":4633,"question":"What happens if a 'process.nextTick()' call is recursively invoked?","description":"Exploring edge cases with 'process.nextTick()'.","answers":{"answer_a":"It blocks the event loop","answer_b":"It throws a stack overflow error","answer_c":"It queues all calls and executes them in the next event loop cycle","answer_d":"It cancels all previously queued tasks","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Recursively invoking 'process.nextTick()' blocks the event loop because it continuously prioritizes the queued tasks over I/O events.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Hard"},"8":{"id":5222,"question":"How does a transform stream differ from a duplex stream in Node.js?","description":"Comparing transform and duplex streams.","answers":{"answer_a":"A transform stream modifies data as it is read or written, while a duplex stream allows independent read and write operations","answer_b":"A transform stream can only read data, while a duplex stream can read and write","answer_c":"A duplex stream buffers data, but a transform stream does not","answer_d":"A duplex stream is bidirectional, but a transform stream is not","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Transform streams modify data as it is read or written, whereas duplex streams allow independent read and write operations.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Hard"},"9":{"id":5054,"question":"What is a major limitation of using `crypto.createHash()` for password storage?","description":"Hashing limitations in password storage.","answers":{"answer_a":"It does not include a salt or support key stretching","answer_b":"It cannot handle large passwords","answer_c":"It is not supported in modern Node.js versions","answer_d":"It automatically truncates hashes","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"'crypto.createHash()' is not suitable for password storage as it lacks salt and key stretching, which are essential for secure password hashing.","tip":null,"tags":[{"name":"nodeJS"}],"category":"NodeJs","difficulty":"Hard"},"quizMetaData":{"createdBy":"18656047691","difficulty":"hard","topic":"nodejs","totalQuestions":"10","createdAt":"28/05/2025\t23:38:10","description":"ccg","time":"30"},"marks":"1","answer":{"0":"answer_a","1":"answer_c","2":"answer_d","3":"answer_a","4":"answer_b","5":"answer_b","6":"answer_b","7":"answer_b","8":"answer_d","9":"answer_c"}}