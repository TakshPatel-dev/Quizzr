{"0":{"id":2713,"question":"How do you use a custom lookup URL parameter in a DRF viewset?","description":"Custom lookup URL parameters allow you to use a different identifier for retrieving objects.","answers":{"answer_a":"Set the lookup_url_kwarg attribute in the viewset","answer_b":"Override the get_queryset() method","answer_c":"Use the @lookup_param decorator","answer_d":"Change the URLconf to accept custom parameters","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"To use a custom lookup URL parameter, set the lookup_url_kwarg attribute in the viewset to specify which URL parameter should be used for lookups.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"1":{"id":2865,"question":"How do you filter records using Django ORM?","description":"Filtering allows you to retrieve specific records that match given criteria.","answers":{"answer_a":"Use the filter() method on the model manager","answer_b":"Use the get() method only","answer_c":"Use the select() method","answer_d":"Use SQL queries directly in the model","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"To filter records, use the filter() method on the model manager. This returns a queryset of all records matching the filter criteria.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"2":{"id":2994,"question":"What is the difference between pre_save and post_save signals in Django?","description":"Understanding the difference between pre_save and post_save signals is important for deciding when to perform certain actions.","answers":{"answer_a":"pre_save is triggered before a model instance is saved, post_save is triggered after","answer_b":"pre_save is triggered after the instance is deleted, post_save before","answer_c":"Both are triggered simultaneously","answer_d":"pre_save is only used for deletion, post_save for creation","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"The pre_save signal is triggered before a model instance is saved, allowing modifications before committing to the database, while the post_save signal is triggered after the instance is saved.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"3":{"id":2892,"question":"How do you use Q objects to combine multiple conditions in Django ORM?","description":"Q objects allow you to combine multiple conditions using logical operators, making complex queries easier to express.","answers":{"answer_a":"Use Q objects with & (AND) and | (OR) operators","answer_b":"Use only the filter() method","answer_c":"Use the get() method","answer_d":"Use raw SQL queries","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"To combine multiple conditions, use Q objects with & (AND) and | (OR) operators. This allows you to create complex queries more easily.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"4":{"id":2547,"question":"How do you make a model field optional in Django?","description":"In Django, you can make a model field optional by setting 'blank=True' and 'null=True'.","answers":{"answer_a":"blank=True","answer_b":"null=True","answer_c":"blank=True, null=True","answer_d":"optional=True","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"false","answer_c_correct":"true","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"Setting 'blank=True' allows a field to be optional in forms, and 'null=True' allows the database to store a NULL value for that field.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"5":{"id":2907,"question":"How do you perform an 'in' lookup in Django ORM?","description":"An 'in' lookup allows you to filter records where a field's value is within a list of specified values.","answers":{"answer_a":"Use the __in lookup in the filter() method","answer_b":"Use the contains() method","answer_c":"Use the values() method","answer_d":"Use raw SQL queries","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"To perform an 'in' lookup, use the __in lookup in the filter() method, such as filter(field__in=[value1, value2, value3]).","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"6":{"id":2682,"question":"How do you implement filtering for a viewset in Django REST Framework?","description":"Filtering allows clients to request only the data that meets certain conditions.","answers":{"answer_a":"Use the filter_backends attribute in the viewset","answer_b":"Set the filters in the serializer","answer_c":"Add filters to the model","answer_d":"Use the @filter decorator","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"To implement filtering for a viewset, use the filter_backends attribute, specifying the desired filter backend classes, such as DjangoFilterBackend or SearchFilter.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"7":{"id":2913,"question":"How do you use the 'select_for_update()' method in Django ORM?","description":"The 'select_for_update()' method is used to lock rows in the database to prevent concurrent modifications.","answers":{"answer_a":"Use select_for_update() on a queryset inside a transaction","answer_b":"Use the lock() method","answer_c":"Use the defer() method","answer_d":"Use raw SQL queries","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"To lock rows for update, use the select_for_update() method on a queryset inside a transaction. This prevents other transactions from modifying the rows until the current transaction is complete.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"8":{"id":2546,"question":"Which Django field type would you use to store JSON data?","description":"The JSONField in Django is used to store JSON-encoded data.","answers":{"answer_a":"TextField","answer_b":"CharField","answer_c":"JSONField","answer_d":"DictField","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"false","answer_c_correct":"true","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"JSONField is used in Django to store JSON-formatted data and automatically handles encoding and decoding.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"9":{"id":2729,"question":"How can you provide a custom response format for a DRF view?","description":"Providing a custom response format allows you to modify how data is presented to the client.","answers":{"answer_a":"Override the finalize_response() method in the view","answer_b":"Set the response_format attribute in the serializer","answer_c":"Use the @custom_response decorator","answer_d":"Override the get_queryset() method","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"To provide a custom response format, override the finalize_response() method in the view to modify the response before it is returned to the client.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"quizMetaData":{"createdBy":"99692866465","difficulty":"medium","topic":"django","totalQuestions":"10","createdAt":"25/05/2025\t15:25:16","description":"fdsdsf","time":"30"},"marks":"0","answer":{}}