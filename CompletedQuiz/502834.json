{"0":{"id":2728,"question":"How do you add a custom HTTP method to a DRF viewset?","description":"Adding custom HTTP methods allows you to provide additional functionality beyond the standard CRUD operations.","answers":{"answer_a":"Use the @action decorator with the appropriate method specified","answer_b":"Override the get_queryset() method","answer_c":"Add a method attribute to the viewset","answer_d":"Use the @http_method decorator","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"To add a custom HTTP method to a viewset, use the @action decorator and specify the appropriate method (e.g., POST, GET) to define the custom action.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"1":{"id":2515,"question":"How do you apply a filter condition on a related model in Django?","description":"Django allows you to apply filters to related models using the '__' (double underscore) notation.","answers":{"answer_a":"Using .filter_related()","answer_b":"Using .annotate()","answer_c":"Using double underscore notation","answer_d":"Using .get_related()","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"false","answer_c_correct":"true","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"In Django, you can filter related models using double underscores, such as Parent.objects.filter(child__name='example').","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"2":{"id":2678,"question":"What is the purpose of the HyperlinkedIdentityField in DRF?","description":"The HyperlinkedIdentityField is used to represent relationships using hyperlinks in a serializer.","answers":{"answer_a":"To display the primary key of a related object","answer_b":"To provide a hyperlink to the detail view of a related object","answer_c":"To validate nested fields","answer_d":"To manage pagination","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"true","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"The HyperlinkedIdentityField in DRF is used to provide a hyperlink to the detail view of a related object, making the API more RESTful.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"3":{"id":2676,"question":"What is the use of the get_queryset method in a DRF viewset?","description":"The get_queryset method is used to provide a specific queryset for the viewset.","answers":{"answer_a":"To filter the queryset based on the authenticated user","answer_b":"To handle the pagination logic","answer_c":"To generate API URLs","answer_d":"To define allowed HTTP methods","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"The get_queryset method in a DRF viewset allows you to filter or customize the queryset based on the current request or authenticated user.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"4":{"id":2541,"question":"How can you add a method to a Django model that is accessible as if it were a field?","description":"To make a method accessible like a model field, you use the @property decorator.","answers":{"answer_a":"@classmethod","answer_b":"@staticmethod","answer_c":"@model_field","answer_d":"@property","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"false","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"true","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"The @property decorator allows you to create a method in a Django model that can be accessed as if it were a field, without calling it as a method.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"5":{"id":2942,"question":"How can middleware modify the context data before rendering a template in Django?","description":"Middleware can modify the context data that is passed to a template before it is rendered.","answers":{"answer_a":"Use the process_template_response() method","answer_b":"Use the process_request() method","answer_c":"Use the process_response() method","answer_d":"Modify the MIDDLEWARE setting","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"The process_template_response() method can be used in middleware to modify the context data before the template is rendered, providing additional flexibility.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"6":{"id":2815,"question":"How do you add conditional logic to the save process of a model in Django Admin?","description":"Adding conditional logic to the save process allows you to enforce certain rules before saving a model instance.","answers":{"answer_a":"Override the save_model() method in ModelAdmin","answer_b":"Use the @save_condition decorator","answer_c":"Set save_condition=True in settings.py","answer_d":"Override the get_queryset() method","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"To add conditional logic to the save process, override the save_model() method in ModelAdmin, allowing you to add custom rules before saving a model instance.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"7":{"id":2952,"question":"How do you measure request processing time using middleware in Django?","description":"Middleware can be used to calculate the time taken to process a request, which is useful for performance monitoring.","answers":{"answer_a":"Record the start time in process_request() and calculate the duration in process_response()","answer_b":"Use the process_view() method only","answer_c":"Edit the settings.py file","answer_d":"Use the models.py file","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"To measure request processing time, record the start time in process_request() and calculate the duration in process_response(), then log or add the duration to the response.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"8":{"id":2877,"question":"How do you update multiple records at once using Django ORM?","description":"Updating multiple records at once allows you to efficiently modify multiple rows in a table.","answers":{"answer_a":"Use the update() method on a queryset","answer_b":"Use the save() method in a loop","answer_c":"Use the bulk_update() method","answer_d":"Use raw SQL queries","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"To update multiple records, use the update() method on a queryset. This method allows you to modify multiple rows at once without iterating over them.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"9":{"id":2986,"question":"How do you send a custom signal in Django?","description":"Sending a custom signal allows you to notify other parts of your application when a specific action occurs.","answers":{"answer_a":"Use the send() method on the custom signal","answer_b":"Call the signal directly","answer_c":"Use the settings.py file","answer_d":"Modify the models.py file","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"To send a custom signal, use the send() method on the signal instance, passing any required arguments to notify connected receivers.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"quizMetaData":{"createdBy":"99692866465","difficulty":"medium","topic":"django","totalQuestions":"10","createdAt":"25/05/2025\t15:46:39","description":"gfdfg","time":"30"},"marks":"0","answer":{}}