{"0":{"id":2800,"question":"How do you customize the display of choices for a field in Django Admin?","description":"Customizing the display of choices for a field can make the form more intuitive for administrators.","answers":{"answer_a":"Define choices in the model field and use the get_FOO_display() method","answer_b":"Set custom_choices=True in settings.py","answer_c":"Use the @choices_display decorator","answer_d":"Override the form_class attribute","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"To customize the display of choices, define choices in the model field and use the get_FOO_display() method to display the human-readable value in Django Admin.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"1":{"id":2953,"question":"How can middleware be used to add custom headers to a response in Django?","description":"Adding custom headers to a response can be useful for various reasons, such as security or providing additional metadata.","answers":{"answer_a":"Use the process_response() method to modify the response headers","answer_b":"Use the process_request() method","answer_c":"Edit the models.py file","answer_d":"Modify the settings.py file","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"The process_response() method allows middleware to modify the response object, including adding or modifying headers before sending the response to the client.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"2":{"id":2903,"question":"How do you update a model's field without triggering the save() method in Django ORM?","description":"Updating a field without triggering the save() method can be useful to avoid running any custom logic defined in the save() method.","answers":{"answer_a":"Use the update() method on the queryset","answer_b":"Use the save() method with update_fields","answer_c":"Use the create() method","answer_d":"Use raw SQL queries","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"To update a model's field without triggering the save() method, use the update() method on the queryset. This method directly updates the database without calling the save() method.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"3":{"id":2707,"question":"How do you perform bulk updates in Django REST Framework?","description":"Bulk updates allow you to update multiple records in a single request, improving efficiency.","answers":{"answer_a":"Use a custom viewset method that handles bulk updates","answer_b":"Use the ListCreateAPIView","answer_c":"Set bulk_update=True in the serializer","answer_d":"Use the @bulk_update decorator","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"To perform bulk updates in DRF, create a custom viewset method that handles the logic for updating multiple records in a single request.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"4":{"id":2693,"question":"How do you use a serializer to validate data before saving it to the database in DRF?","description":"Validating data before saving ensures that only correct data is stored in the database.","answers":{"answer_a":"Call the is_valid() method before calling save()","answer_b":"Directly call the save() method","answer_c":"Use the @validate_data decorator","answer_d":"Override the perform_create() method","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"To validate data before saving it to the database, call the is_valid() method on the serializer to ensure that the data meets the validation requirements.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"5":{"id":2987,"question":"How can you ensure that a signal only runs once for a particular event in Django?","description":"Sometimes you want a signal to be executed only once, even if the event is triggered multiple times.","answers":{"answer_a":"Use a flag or conditional check to ensure the signal only runs once","answer_b":"Modify the urls.py file","answer_c":"Disconnect the signal immediately after connecting it","answer_d":"Edit the template files","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"You can use a flag or add a condition in the receiver function to ensure the signal is only executed once, even if the event is triggered multiple times.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"6":{"id":2946,"question":"How can you conditionally run middleware logic in Django?","description":"Sometimes, you may need to run middleware logic based on certain conditions, such as user roles or request paths.","answers":{"answer_a":"Use an if statement inside the middleware methods to check conditions","answer_b":"Use the process_exception() method","answer_c":"Modify the urls.py file","answer_d":"Use settings.py to add conditions","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"You can use an if statement inside the middleware methods to check for specific conditions, such as user roles or request paths, and apply logic accordingly.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"7":{"id":2673,"question":"What is the difference between a ModelSerializer and a regular Serializer in Django REST Framework?","description":"ModelSerializer and Serializer are both used for serialization, but they have key differences in usage and automation.","answers":{"answer_a":"ModelSerializer automatically generates fields from a model, while Serializer requires manual field definition","answer_b":"ModelSerializer is used only for read operations, while Serializer handles both read and write","answer_c":"ModelSerializer requires a custom save method","answer_d":"Serializer cannot handle nested relationships","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"ModelSerializer is a shortcut for creating serializers that automatically generate fields based on the given model, whereas a regular Serializer requires you to manually define each field.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"8":{"id":2869,"question":"How do you order query results using Django ORM?","description":"Ordering results is useful when you need data in a specific sequence, such as ascending or descending order.","answers":{"answer_a":"Use the order_by() method on the queryset","answer_b":"Use the filter() method","answer_c":"Use the sort() function in Python","answer_d":"Use the SQL ORDER BY clause","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"To order query results, use the order_by() method on the queryset, specifying the field names with or without a minus sign for descending order.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"9":{"id":2689,"question":"How can you apply multiple permissions to a single viewset in DRF?","description":"Multiple permissions can be used to add more granular access control to a viewset.","answers":{"answer_a":"Use a list of permission classes in the permission_classes attribute","answer_b":"Override the get_queryset() method","answer_c":"Add permissions to the serializer class","answer_d":"Use the @permission_required decorator","answer_e":null,"answer_f":null},"multiple_correct_answers":"false","correct_answers":{"answer_a_correct":"true","answer_b_correct":"false","answer_c_correct":"false","answer_d_correct":"false","answer_e_correct":"false","answer_f_correct":"false"},"correct_answer":null,"explanation":"To apply multiple permissions, set the permission_classes attribute to a list of permission classes, allowing multiple checks for access control.","tip":null,"tags":[{"name":"Django"}],"category":"Django","difficulty":"Medium"},"quizMetaData":{"createdBy":"99692866465","difficulty":"medium","topic":"django","totalQuestions":"10","createdAt":"25/05/2025\t20:43:07","description":"dsfdsfdsfds","time":"30"},"marks":"1","answer":{"2":"answer_a"}}